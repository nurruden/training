## 6简述深浅拷贝的区别
1. copy.copy 浅拷贝 只拷贝父对象，不会拷贝对象的内部的子对象。
2. copy.deepcopy 深拷贝 拷贝对象及其子对象
#### 举个栗子:
```
import copy
a = [1, 2, 3, 4, ['m',{'a': {"k":"v"}}] ] #原始对象

b = a #赋值，传对象的引用
c = copy.copy(a) #对象拷贝，浅拷贝
d = copy.deepcopy(a) #对象拷贝，深拷贝

a.append(5) #修改对象a
a[4][1]["a"]["k2"] = "v2"  #修改对象a中的['a', 'b']数组对象

print('a = ', a)
print('b = ', b)
print('c = ', c)
print('d = ', d)
输出结果：
a =  [1, 2, 3, 4, ['m', {'a': {'k': 'v', 'k2': 'v2'}}], 5]
b =  [1, 2, 3, 4, ['m', {'a': {'k': 'v', 'k2': 'v2'}}], 5]
c =  [1, 2, 3, 4, ['m', {'a': {'k': 'v', 'k2': 'v2'}}]]
d =  [1, 2, 3, 4, ['m', {'a': {'k': 'v'}}]]

```

## 7列举布尔值为false的值
1. 数字0
2. None
3. 空字符串
4. 空列表
5. 空元祖
6. 空字典

## 8内置函数all和any的区别
 all,所有值均为True时,返回True,有一个不为True,返回False

 any,有一个为True,则返回True,所有为Fasle, 返回False

#### 举个栗子
```
print(all(['A','B','C']))
print(all(['A','B','']))
print(any(['A','B','']))
print(any(['','']))
#打印结果:
True
False
True
False
```
## 10简述dir,type,help,id的作用
1. dir: 不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。如果参数包含方法__dir__()，该方法将被调用。如果参数不包含__dir__()，该方法将最大限度地收集参数信息。
```
import copy
print(dir())
print(dir(copy))
#打印结果
['__author__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__',
 'copy']
['Error', 'PyStringMap', '_EmptyClass', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__',
'__name__', '__package__', '__spec__', '_copy_dispatch', '_copy_immutable', '_copy_with_constructor',
'_copy_with_copy_method', '_deepcopy_atomic', '_deepcopy_dict', '_deepcopy_dispatch', '_deepcopy_list',
'_deepcopy_method', '_deepcopy_tuple', '_keep_alive', '_reconstruct', 'builtins', 'copy', 'deepcopy', 'dispatch_table',
'error', 'name', 't', 'weakref']

```
2. type:返回参数的类型
3. help:查看某个对象的详细文档
4. id:指出对象在内存中的存储位置

## 11简述内置函数globals() locals()的作用

    在Python 2.0及之前的版本中，Python只支持3种作用域，即局部作用域，全局作用域，内置作用域。在Python 2.2中，Python正式引入了一种新的作用域 --- 嵌套作用域。
    在Python 2.1中，嵌套作用域可以作为一个选项被开启；嵌套作用域的引入，本质上为Python实现了对闭包的支持，关于闭包的知识，网上有很多解释，这里就不详细展开了。
    相应地，变量查找顺序由之前的LGB变成LEGB（L：Local，E：Enclosing，G：Global，B：Built-in）。

    在Python中，并不是任何代码块都能引入新的作用域，这与C有很大的不同：
```
#include<stdio.h>
int main() {
    if(2 > 0) {
        int i = 0;
    }
    printf("i = %d", i);
    return 0;
}
```
    在这段代码中，if子句引入了一个局部作用域，变量i就存在于这个局部作用域中，但对外不可见，因此，接下来在printf函数中对变量i的引用会引发编译错误。

    但是，在Python中却并非如此：
```
if True:
    i = 0
print i
```

    在这段代码中，if子句并没有引入一个局部作用域，变量i仍然处在全局作用域中，因此，变量i对于接下来的print语句是可见的。

    实际上，在Python中，只有模块，类以及函数才会引入新的作用域，其它的代码块是不会引入新的作用域的。

    在Python中，使用一个变量之前不必预先声明它，但是在真正使用它之前，它必须已经绑定到某个对象；而名字绑定将在当前作用域中引入新的变量，同时屏蔽外层作用域中的同名变量，不论这个名字绑定发生在当前作用域中的哪个位置。

```
    def f():
    print i
f()
```

     运行结果将显示：NameError: global name 'i' is not defined。Python首先在函数f的本地作用域中查找变量i，查找失败，接着在全局作用域和内置作用域中查找变量i，仍然失败，最终抛出NameError异常。
```
i = 0
def f():
    i = 8
    print i
f()
print i
```
    运行结果显示：8和0。i = 8是一个名字绑定操作，它在函数f的局部作用域中引入了新的变量i，屏蔽了全局变量i，因此f内部的print语句看到的是局部变量i，f外部的print语句看到的是全局变量i。
```
i = 0
def f():
    print i
    i = 0
f()
```
     运行结果显示：UnboundLocalError: local variable 'i' referenced before assignment。在这个例子当中，函数f中的变量i是局部变量，但是在print语句使用它的时候，它还未被绑定到任何对象之上，所以抛出异常。
```
print i
i = 0
```
    不论是以交互的方式运行，还是以脚本文件的方式运行，结果都显示：NameError: name 'i' is not defined。这里的输出结果又与上一个例子不同，这是因为它在顶级作用域（模块作用域）的缘故。
    对于模块代码而言，代码在执行之前，没有经过什么预处理，但是对于函数体而言，代码在运行之前已经经过了一个预处理，因此不论名字绑定发生在作用域的那个位置，它都能感知出来。
    Python虽然是一个静态作用域语言，但是名字查找确实动态发生的，因此直到运行的时候，才会发现名字方面的问题。

    在Python中，名字绑定在所属作用域中引入新的变量，同时绑定到一个对象。名字绑定发生在以下几种情况之下：

    1.参数声明：参数声明在函数的局部作用域中引入新的变量；

    2.赋值操作：对一个变量进行初次赋值会在当前作用域中引入新的变量，后续赋值操作则会重新绑定该变量；

    3.类和函数定义：类和函数定义将类名和函数名作为变量引入当前作用域，类体和函数体将形成另外一个作用域；

    4.import语句：import语句在当前作用域中引入新的变量，一般是在全局作用域；

    5.for语句：for语句在当前作用域中引入新的变量（循环变量）；

    6.except语句：except语句在当前作用域中引入新的变量（异常对象）。

    在Python中，类定义所引入的作用域对于成员函数是不可见的，这与C++或者Java是很不同的，因此在Python中，成员函数想要引用类体定义的变量，必须通过self或者类名来引用它。

    嵌套作用域的加入，会导致一些代码编译不过或者得到不同的运行结果，在这里Python解释器会帮助你识别这些可能引起问题的地方，给出警告。

    locals函数返回所有的局部变量，但是不会返回嵌套作用域中的变量，实际上没有函数会返回嵌套作用域中的变量。

## 12简述三元运算符书写格式
```
V1 if X else V2
```
## 13简述lambda表达式书写格式
    普通函数
```
def sum(x,y-10):
    return x+y
```
    lambda函数
```
lambda x,y=10:x+y
```
## 15简述'r'和'rb'的区别
    文件在磁盘中存储都是以二进制的形式存储的，但是读的时候，如果解释这些二进制文件时可以选择的。可以是以ASCII码的方式读取，就是"r"读取字符文件。另外一种是以文件存储时原来的二进制形式"rb"。这样就是有的dat文件，打开的时候是用rb的方式，有的用r方式。
    字符文件：输入什么就存储什么。例如你输入字符xyz123，那么用记事本打开，就显示xyz123。
    二进制文件：无论输入什么存储的都是0和1的数字，而且二进制文件是有格式的。
    "r"：以只读形式打开一个文本文件。"rb"：以只读形式打开一个二进制文件。

## 16文件操作时with作用
    用open打开,最后需要close该文件,用with打开,Python会在最后自动调用close方法帮助close该文件
## 17利用with实现同时打开两个文件(一读一写)
    with open(filename1, 'rb') as fp1, open(filename2, 'wb') as fp2

## 18函数默认返回值是什么
    None
## 19简述函数普通参数,指定参数,默认参数,动态参数的特点及注意事项